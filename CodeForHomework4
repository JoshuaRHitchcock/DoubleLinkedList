//import java.util.LinkedList;

/*
* Name: Joshua Richard Hitchcock
* Course & Section #: CSCI146 - Intro to Algorithmic Design II
* Date: 2/21/2022
* Program Function\Purpose: HW4
*/

/*
 * Written by JJ Shepherd
 */
public class DoubleLinkedListTester {
	public static final double[] TEST_VALS_1 = {0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0};
	public static final double[] TEST_VALS_2 = {1.0,3.0,4.0,5.0,6.0,7.0,8.0};
	public static final double[] TEST_VALS_3 = {1.0,3.0,-4.0,5.0,-6.0,7.0,-8.0};
	
	public static final String DEC = "------------------------------------------------------\n";
	public static void main(String[] args) {
		printDecorated("Double Double Linked List Tester");
		DoubleDoubleLL ddList = new DoubleDoubleLL();

		System.out.println("SUCCESS: "+insertAndContainsTest(ddList)+"\n");
		System.out.println("SUCCESS: "+deleteTest(ddList)+"\n");
		System.out.println("SUCCESS: "+modifyingValuesTest(ddList)+"\n");
		
		printDecorated("Printing the list");
		ddList.print();
		
		ddList.gotoEnd();
		System.out.println("Print last element: "+ddList.getCurrent());
	}
	
	public static boolean insertAndContainsTest(DoubleDoubleLL ddList)
	{
		printDecorated("Inserting and Contains Test");
		for(int i=0;i<TEST_VALS_1.length;i++)
			ddList.add(TEST_VALS_1[i]);
		return valuesMatch(ddList,TEST_VALS_1);
	}
	public static boolean deleteTest(DoubleDoubleLL ddList)
	{
		printDecorated("Removing Test\nRemoving first item, third item, and last item");
		ddList.reset();
		ddList.removeCurrent();
		
		ddList.gotoNext();
		ddList.removeCurrent();

		ddList.gotoEnd();
		ddList.removeCurrent();
		return valuesMatch(ddList,TEST_VALS_2);
	}
	public static boolean modifyingValuesTest(DoubleDoubleLL ddList)
	{
		printDecorated("Modified Values Test\nChanging all even values to negative values");
		ddList.reset();
		while(ddList.hasMore())
		{
			if(ddList.getCurrent() % 2 == 0)
				ddList.setCurrent(-ddList.getCurrent());
			ddList.gotoNext();
		}
		return valuesMatch(ddList,TEST_VALS_3);
	}
	public static boolean valuesMatch(DoubleDoubleLL ddList, double[] testVals)
	{
		for(int i=0;i<testVals.length;i++)
			if(!ddList.contains(testVals[i]))
				return false;
		return true;
	}
	public static void printDecorated(String str)
	{
		System.out.println(DEC+str+"\n"+DEC);
	}
}

//
//
//
//

class DoubleDoubleLL {
	
	Node head;
	Node tail;
	Node current;
	
	    //A node class for doubly linked list
	    class Node{  
	        double item;  
	        Node prev;  
	        Node next;  
	   
	        //Constructor for node
	        public Node(double item2) {  
	            this.item = item2; 
	            this.prev = null;
	            this.next = null;
	        }  
	    }  
	     
		public void add(double item) {
			
		//Create a new node  
        Node newNode = new Node(item);  
   
        //if list is empty, head and tail points to newNode  
        if(head == null) {  
            head = tail = newNode;  
             
            head.prev = null;   
            tail.next = null;  
        }  
        else {  
            //add newNode to the end of list. tail.next set to newNode  
            tail.next = newNode;  
            //newNode set to prev set to tail  
            newNode.prev = tail;  
            //newNode becomes new tail  
            tail = newNode;  
            //tail's next point to null  
            tail.next = null;  
        }  
        
    }  
		
		public void gotoEnd() 
		{
		current = tail; 
		}


		public boolean contains(double searchData)
		    {
		        // Get first node
		        Node head = this.head;
		        // Get last node
		        Node tail = this.tail;
		        while (head != null && tail != null)
		        {
		            if (head.item == searchData || tail.item == searchData)
		            {
		                
		                return true;
		            }
		            if (head == tail || head.next == tail)
		            {
		                return false;
		            }
		            // To the right node
		            head = head.next;
		            // To the left node
		            tail = tail.prev;
		        }
		        
		        return false;
				}
	
	
		public void reset() 
		{
		current = head;
		}


		public void removeCurrent() {

/*This method should remove where ever we are in the list				
* My attempt at this is to move around the node I want to remove
*/			

	if (current == tail) {
		return;
	}
	
	//
	//Code from the book edited for the homework
	//double CurrentToBeRemoved = current.item;
	current.prev = current.next;
	current.next = current.prev;
	current = current.next;
	
	//Test for removing items
	//System.out.println("We are removing the item" + CurrentToBeRemoved);

return;
		}
	
		
		public void gotoNext() {
			
/*This method should go forward one element in the list.
* I am trying to move up one node. My attempt to 
* do this is to move the node to the tail and head of the next node.
*/
			head = head.next;
			}
		
		public boolean hasMore() {
			
			while(tail.next != null) {
		      return true;
			}
			return false;
		}
	
	
		public void setCurrent(Double d)
		{
		if (current == null)
		{
		return;
		}
		current.item = d;
		}

	
	public Double getCurrent() {
	if (current == null)
	{
	return null;
	}
	return current.item;
	}

	
	public void print() {
		
	    reset();
		Node Current = head;
		
		while(Current != null) {
		     System.out.println(Current.item);
		     Current = Current.next;
		}
		
		return;
}
}
